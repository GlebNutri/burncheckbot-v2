import logging
import os
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, filters, ContextTypes
)
from telegram.error import BadRequest
from PIL import Image, ImageDraw, ImageFont
import io

from config import (
    BOT_TOKEN, TEST_QUESTIONS, SCORING_KEYS, THRESHOLDS, 
    INTERPRETATION, CHANNEL_USERNAME, CHANNEL_LINK, CHANNEL_NAME, 
    DISABLE_SUBSCRIPTION_CHECK
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging.handlers

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
log_dir = '/var/log/burncheckbot'
os.makedirs(log_dir, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
logger.handlers.clear()

# –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤
file_handler = logging.handlers.RotatingFileHandler(
    f'{log_dir}/bot.log',
    maxBytes=10*1024*1024,  # 10MB
    backupCount=5,
    encoding='utf-8'
)
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

# –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—à–∏–±–æ–∫
error_handler = logging.handlers.RotatingFileHandler(
    f'{log_dir}/bot_errors.log',
    maxBytes=5*1024*1024,  # 5MB
    backupCount=3,
    encoding='utf-8'
)
error_handler.setLevel(logging.ERROR)
error_handler.setFormatter(formatter)
logger.addHandler(error_handler)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
logger.info(f"–í–µ—Ä—Å–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
ASK_NAME, CHOOSING_PHASE, ANSWERING_QUESTIONS, CHECKING_SUBSCRIPTION, SHOWING_RESULTS = range(5)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_answers = {}

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
    if DISABLE_SUBSCRIPTION_CHECK:
        return True
        
    try:
        user_id = update.effective_user.id
        
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ
        channel_username = CHANNEL_USERNAME.lstrip('@')
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª–µ {channel_username}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å @
            logger.info(f"–ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å @{channel_username}")
            chat_member = await context.bot.get_chat_member(chat_id=f"@{channel_username}", user_id=user_id)
            logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_member.status}")
            return chat_member.status in ['member', 'administrator', 'creator']
        except Exception as e1:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å @: {e1}")
            try:
                # –ü—Ä–æ–±—É–µ–º –±–µ–∑ @
                logger.info(f"–ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑ @: {channel_username}")
                chat_member = await context.bot.get_chat_member(chat_id=channel_username, user_id=user_id)
                logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_member.status}")
                return chat_member.status in ['member', 'administrator', 'creator']
            except Exception as e2:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–µ–∑ @: {e2}")
                # –ü—Ä–æ–±—É–µ–º —Å —á–∏—Å–ª–æ–≤—ã–º ID –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                try:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                    chat_info = await context.bot.get_chat(f"@{channel_username}")
                    logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ: {chat_info.id}")
                    chat_member = await context.bot.get_chat_member(chat_id=chat_info.id, user_id=user_id)
                    logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_member.status}")
                    return chat_member.status in ['member', 'administrator', 'creator']
                except Exception as e3:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ ID –∫–∞–Ω–∞–ª–∞: {e3}")
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª–µ {channel_username}")
                    logger.warning(f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    logger.warning(f"1. –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                    logger.warning(f"2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username –∫–∞–Ω–∞–ª–∞: {channel_username}")
                    logger.warning(f"3. –ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π")
                    logger.warning(f"4. –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                    return True  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return True  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

async def show_subscription_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    query = update.callback_query
    await query.answer()
    
    if DISABLE_SUBSCRIPTION_CHECK:
        # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        return await show_results(update, context)
    
    subscription_text = f"""
üéØ *–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥*

üì¢ **–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª** *"{CHANNEL_NAME}"*

üí° –¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ:
‚Ä¢ –ú–æ–π –ª–∏—á–Ω—ã–π –æ–ø—ã—Ç –∫—Ä–∏–∑–∏—Å–∞ 30
‚Ä¢ –¢–æ —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –∂–∏—Ç—å –∂–∏–∑–Ω—å –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞
‚Ä¢ –ù–µ–π—Ä–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–ª–µ–≥—á–∞—é—Ç –º–Ω–µ –∂–∏–∑–Ω—å
‚Ä¢ –ù–µ–º–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç—ã

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞!
"""
    
    keyboard = [
        [InlineKeyboardButton(f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {CHANNEL_NAME}", url=CHANNEL_LINK)],
        [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="check_subscription")],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=subscription_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return CHECKING_SUBSCRIPTION

async def handle_subscription_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "check_subscription":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        is_subscribed = await check_subscription(update, context)
        
        if is_subscribed:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            return await show_results(update, context)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            error_text = f"""
‚ö†Ô∏è **–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã:
1. –ü–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª
2. –ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" 
3. –î–æ–∂–¥–∞–ª–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏

–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
"""
            
            keyboard = [
                [InlineKeyboardButton(f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {CHANNEL_NAME}", url=CHANNEL_LINK)],
                [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="check_subscription")],
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await query.edit_message_text(
                    text=error_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            except Exception as e:
                if "Message is not modified" in str(e):
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
                    pass
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            return CHECKING_SUBSCRIPTION
    elif query.data == "restart":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–∑ restart_test
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
        if user_id in user_answers:
            del user_answers[user_id]
        
        welcome_text = """
üî¨ *–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Ä–æ–≤–Ω—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è*
*–ê–≤—Ç–æ—Ä: –í.–í. –ë–æ–π–∫–æ (1996)*

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è –ø–æ —Ç—Ä–µ–º —Ñ–∞–∑–∞–º:

 *–§–∞–∑—ã –≤—ã–≥–æ—Ä–∞–Ω–∏—è:*

üò∞ **–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ** - –¢—ã –≤—Ä–æ–¥–µ –¥–µ—Ä–∂–∏—à—å—Å—è, –Ω–æ –≤—Å—ë —á–∞—â–µ –ª–æ–≤–∏—à—å —Å–µ–±—è –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –Ω–∞–ø—Ä—è–≥–µ. –í—Ä–æ–¥–µ –Ω–∏—á–µ–≥–æ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ, –Ω–æ –≤–Ω—É—Ç—Ä–∏ —É–∂–µ –Ω–µ —Å–ø–æ–∫–æ–π–Ω–æ. –†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, –Ω–µ–¥–æ—Å–∫–∞–∑–∞–Ω–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å ‚Äî –ø–µ—Ä–≤—ã–µ –∑–≤–æ–Ω–æ—á–∫–∏.

üò§ **–†–µ–∑–∏—Å—Ç–µ–Ω—Ü–∏—è** - –ù–∞—á–∏–Ω–∞–µ—à—å –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è. –í—Å—ë –∏ –≤—Å–µ –Ω–∞—á–∏–Ω–∞—é—Ç –±–µ—Å–∏—Ç—å. –ü—Ä–∏—Ç–≤–æ—Ä—è–µ—à—å—Å—è, —á—Ç–æ —Å–ª—É—à–∞–µ—à—å, –≥–æ–≤–æ—Ä–∏—à—å ¬´–æ–∫–µ–π¬ª ‚Äî –∏ –≤ –º—ã—Å–ª—è—Ö –≤—ã–∫–ª—é—á–∞–µ—à—å—Å—è. –•–æ—á–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å –∏ –∏—Å—á–µ–∑–Ω—É—Ç—å. –ò–¥–µ–∏, —Ü–µ–ª–∏, —Å–º—ã—Å–ª—ã ‚Äî –Ω–∞ –ø–∞—É–∑–µ.

üòµ **–ò—Å—Ç–æ—â–µ–Ω–∏–µ** - –í—Å—ë. –ü—É—Å—Ç–æ. –ù–∏ —ç–º–æ—Ü–∏–π, –Ω–∏ —Å–∏–ª. –£—Ç—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–æ–ø—Ä–æ—Å–∞: ¬´–ó–∞—á–µ–º –≤—Å—ë —ç—Ç–æ?¬ª. –¢—ã –ø—Ä–æ—Å—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—à—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–µ. –≠–Ω–µ—Ä–≥–∏–∏ –Ω–µ—Ç –¥–∞–∂–µ –Ω–∞ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ. –≠—Ç–æ –Ω–µ –ª–µ–Ω—å. –≠—Ç–æ —Ç—ã –≤—ã–≥–æ—Ä–µ–ª.

–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∑—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
"""
        
        keyboard = []
        for i, phase_data in enumerate(TEST_QUESTIONS):
            keyboard.append([InlineKeyboardButton(
                phase_data["phase"], 
                callback_data=f"phase_{i}"
            )])
        
        keyboard.append([InlineKeyboardButton("üìä –ü—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç", callback_data="full_test")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return CHOOSING_PHASE
    
    return CHECKING_SUBSCRIPTION

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä —Ñ–∞–∑—ã"""
    logger.info("=== –§–£–ù–ö–¶–ò–Ø START –í–´–ó–í–ê–ù–ê ===")
    logger.info(f"Update type: {type(update)}")
    logger.info(f"Update message: {update.message}")
    logger.info(f"Update effective user: {update.effective_user}")
    
    user_id = update.effective_user.id
    logger.info(f"User ID: {user_id}")
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_answers:
        logger.info(f"–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        del user_answers[user_id]
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'full_name' in context.user_data:
        logger.info("–£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è")
        del context.user_data['full_name']
    if 'selected_test' in context.user_data:
        logger.info("–£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–∞")
        del context.user_data['selected_test']
    
    logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–∞–∑—ã")
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–∑—ã
    return await start_phase_selection(update, context)

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    parts = text.split()
    if len(parts) < 2:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return ASK_NAME
    
    # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
    formatted_name = ' '.join(word.capitalize() for word in parts)
    context.user_data['full_name'] = formatted_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–∞
    if 'selected_test' in context.user_data:
        user_id = update.effective_user.id
        selected_test = context.user_data['selected_test']
        
        if selected_test == "full_test":
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
            user_answers[user_id] = {
                "current_phase": 0,
                "current_question": 0,
                "answers": {},
                "full_test": True
            }
            return await start_questions(update, context)
        else:
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Ñ–∞–∑—ã
            phase_index = int(selected_test.split("_")[1])
            user_answers[user_id] = {
                "current_phase": phase_index,
                "current_question": 0,
                "answers": {},
                "full_test": False
            }
            return await start_questions(update, context)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–∑—ã
        return await start_phase_selection(update, context)

async def start_phase_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–∑—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ñ–∞–∑–∞–º –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    logger.info("=== –§–£–ù–ö–¶–ò–Ø START_PHASE_SELECTION –í–´–ó–í–ê–ù–ê ===")
    logger.info(f"Update –∏–º–µ–µ—Ç callback_query: {hasattr(update, 'callback_query') and update.callback_query}")
    logger.info(f"Update message: {update.message}")
    logger.info(f"Update type: {type(update)}")
    
    # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ CallbackQuery (–∫–Ω–æ–ø–∫–∞), –∏–Ω–∞—á–µ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if hasattr(update, 'callback_query') and update.callback_query:
        query = update.callback_query
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—ã–±–æ—Ä —Ñ–∞–∑—ã, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑ –º–µ–Ω—é
        if query.data and (query.data.startswith("phase_") or query.data == "full_test"):
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if 'full_name' not in context.user_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–∞–∑—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
                if query.data == "full_test":
                    context.user_data['selected_test'] = "full_test"
                else:
                    context.user_data['selected_test'] = f"phase_{query.data.split('_')[1]}"
                
                intro = (
                    "–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è, –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ —Ç–µ–±–µ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞.\n"
                    "–ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –∏ –Ω–µ —Ö—Ä–∞–Ω–∏–º —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω):"
                )
                await query.edit_message_text(intro)
                return ASK_NAME
            
            # –ï—Å–ª–∏ –∏–º—è —É–∂–µ –µ—Å—Ç—å, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
            if query.data == "full_test":
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
                user_answers[user_id] = {
                    "current_phase": 0,
                    "current_question": 0,
                    "answers": {},
                    "full_test": True
                }
                return await start_questions(update, context)
            else:
                # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Ñ–∞–∑—ã
                phase_index = int(query.data.split("_")[1])
                user_answers[user_id] = {
                    "current_phase": phase_index,
                    "current_question": 0,
                    "answers": {},
                    "full_test": False
                }
                return await start_questions(update, context)
        
        send_func = query.edit_message_text
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥–∞ /start)
        query = None
        send_func = update.message.reply_text
        logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ callback_query)")

    welcome_text = """
üî¨ *–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Ä–æ–≤–Ω—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è*


–≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –±–∞–∑–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –º–µ—Ç–æ–¥–∏–∫–∏ –í.–í. –ë–æ–π–∫–æ (1996), –∫–æ—Ç–æ—Ä–∞—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞—Å—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è —É —Ç–µ—Ö, –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–¥—å–º–∏.

–ú—ã –ø–µ—Ä–µ–ø–∏—Å–∞–ª–∏ –µ—ë –≤ –∂–∏–≤–æ–º, —á–µ—Å—Ç–Ω–æ–º –∏ –ø–æ–Ω—è—Ç–Ω–æ–º —è–∑—ã–∫–µ, –±–ª–∏–∂–µ –∫ —Ç–µ–º, –∫–æ–º—É —Å–µ–π—á–∞—Å 27‚Äì35. –ï—Å–ª–∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —É—Å—Ç–∞–ª–æ—Å—Ç—å, –∞–ø–∞—Ç–∏—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤—ã–≤–æ–∑–∏—à—å ‚Äî —ç—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –ø–æ —à–∫–∞–ª–µ –≤—ã–≥–æ—Ä–∞–Ω–∏—è.:

 *–§–∞–∑—ã –≤—ã–≥–æ—Ä–∞–Ω–∏—è:*

üò∞ **–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ** - –¢—ã –≤—Ä–æ–¥–µ –¥–µ—Ä–∂–∏—à—å—Å—è, –Ω–æ –≤—Å—ë —á–∞—â–µ –ª–æ–≤–∏—à—å —Å–µ–±—è –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –Ω–∞–ø—Ä—è–≥–µ. –í—Ä–æ–¥–µ –Ω–∏—á–µ–≥–æ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ, –Ω–æ –≤–Ω—É—Ç—Ä–∏ —É–∂–µ –Ω–µ —Å–ø–æ–∫–æ–π–Ω–æ. –†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, –Ω–µ–¥–æ—Å–∫–∞–∑–∞–Ω–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å ‚Äî –ø–µ—Ä–≤—ã–µ –∑–≤–æ–Ω–æ—á–∫–∏.

üò§ **–†–µ–∑–∏—Å—Ç–µ–Ω—Ü–∏—è** - –ù–∞—á–∏–Ω–∞–µ—à—å –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è. –í—Å—ë –∏ –≤—Å–µ –Ω–∞—á–∏–Ω–∞—é—Ç –±–µ—Å–∏—Ç—å. –ü—Ä–∏—Ç–≤–æ—Ä—è–µ—à—å—Å—è, —á—Ç–æ —Å–ª—É—à–∞–µ—à—å, –≥–æ–≤–æ—Ä–∏—à—å ¬´–æ–∫–µ–π¬ª ‚Äî –∏ –≤ –º—ã—Å–ª—è—Ö –≤—ã–∫–ª—é—á–∞–µ—à—å—Å—è. –•–æ—á–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å –∏ –∏—Å—á–µ–∑–Ω—É—Ç—å. –ò–¥–µ–∏, —Ü–µ–ª–∏, —Å–º—ã—Å–ª—ã ‚Äî –Ω–∞ –ø–∞—É–∑–µ.

üòµ **–ò—Å—Ç–æ—â–µ–Ω–∏–µ** - –í—Å—ë. –ü—É—Å—Ç–æ. –ù–∏ —ç–º–æ—Ü–∏–π, –Ω–∏ —Å–∏–ª. –£—Ç—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–æ–ø—Ä–æ—Å–∞: ¬´–ó–∞—á–µ–º –≤—Å—ë —ç—Ç–æ?¬ª. –¢—ã –ø—Ä–æ—Å—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—à—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–µ. –≠–Ω–µ—Ä–≥–∏–∏ –Ω–µ—Ç –¥–∞–∂–µ –Ω–∞ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ. –≠—Ç–æ –Ω–µ –ª–µ–Ω—å. –≠—Ç–æ —Ç—ã –≤—ã–≥–æ—Ä–µ–ª.

–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è —Å–µ–±—è —Ñ–∞–∑—É –∏–ª–∏ –ø—Ä–æ–π–¥–∏ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç:
"""
    keyboard = []
    for i, phase_data in enumerate(TEST_QUESTIONS):
        keyboard.append([InlineKeyboardButton(
            phase_data["phase"], 
            callback_data=f"phase_{i}"
        )])
    keyboard.append([InlineKeyboardButton("üìä –ü—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç", callback_data="full_test")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {send_func}")
    logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {welcome_text[:100]}...")
    logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard}")
    
    try:
        await send_func(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        if "Message is not modified" in str(e):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            logger.info("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É 'Message is not modified'")
            pass
        else:
            raise e
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        raise e
    
    logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {CHOOSING_PHASE}")
    return CHOOSING_PHASE

async def start_questions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∞–∑—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ callback_query (–∫–Ω–æ–ø–∫–∞) –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if hasattr(update, 'callback_query') and update.callback_query:
        query = update.callback_query
        send_func = query.edit_message_text
    else:
        query = None
        send_func = update.message.reply_text
    
    user_id = update.effective_user.id
    
    phase_index = user_answers[user_id]["current_phase"]
    phase_data = TEST_QUESTIONS[phase_index]
    
    question_text = f"""
üìù *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã: {phase_data['phase']}*

–í–æ–ø—Ä–æ—Å 1 –∏–∑ {len(phase_data['questions'])}:

{phase_data['questions'][0]}
"""
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="answer_1"),
            InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="answer_0")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await send_func(
        text=question_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ANSWERING_QUESTIONS

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ callback_data
    if not query.data or not query.data.startswith("answer_"):
        await query.edit_message_text(
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ —Å /start.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    try:
        answer = int(query.data.split("_")[1])
    except (IndexError, ValueError):
        await query.edit_message_text(
            text="‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ —Å /start.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    phase_index = user_answers[user_id]["current_phase"]
    question_index = user_answers[user_id]["current_question"]
    
    if phase_index not in user_answers[user_id]["answers"]:
        user_answers[user_id]["answers"][phase_index] = {}
    
    user_answers[user_id]["answers"][phase_index][question_index] = answer
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    user_answers[user_id]["current_question"] += 1
    
    phase_data = TEST_QUESTIONS[phase_index]
    
    if user_answers[user_id]["current_question"] < len(phase_data['questions']):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        next_question = user_answers[user_id]["current_question"]
        question_text = f"""
üìù *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã: {phase_data['phase']}*

–í–æ–ø—Ä–æ—Å {next_question + 1} –∏–∑ {len(phase_data['questions'])}:

{phase_data['questions'][next_question]}
"""
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="answer_1"),
                InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="answer_0")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=question_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return ANSWERING_QUESTIONS
    else:
        # –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É
        if user_answers[user_id]["full_test"] and phase_index < len(TEST_QUESTIONS) - 1:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ
            user_answers[user_id]["current_phase"] += 1
            user_answers[user_id]["current_question"] = 0
            return await start_questions(update, context)
        else:
            # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
            return await show_subscription_request(update, context)

async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE, generate_certificate_flag: bool = True) -> int:
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
    if hasattr(update, 'callback_query') and update.callback_query:
        query = update.callback_query
        user_id = update.effective_user.id
        edit_message = True
    else:
        # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ handle_subscription_check)
        query = None
        user_id = update.effective_user.id
        edit_message = False
    
    results_text = "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è*\n\n"
    
    total_score = 0
    phase_scores = {}
    completed_phases = 0
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –ø–æ —Ñ–∞–∑–∞–º
    for phase_index, phase_data in enumerate(TEST_QUESTIONS):
        phase_name = phase_data["phase"]
        phase_answers = user_answers[user_id]["answers"].get(phase_index, {})
        
        score = 0
        questions_in_phase = len(phase_data["questions"])
        answered_questions = len(phase_answers)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–π–¥–µ–Ω–∞ –ª–∏ —Ñ–∞–∑–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        if answered_questions == questions_in_phase:
            completed_phases += 1
            for question_index, answer in phase_answers.items():
                if answer == SCORING_KEYS[phase_name][question_index]:
                    score += 1
            
            phase_scores[phase_name] = score
            total_score += score
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ñ–∞–∑—ã
            if score <= THRESHOLDS[phase_name]["medium"]:
                level = "low"
            elif score <= THRESHOLDS[phase_name]["high"]:
                level = "medium"
            else:
                level = "high"
            
            results_text += f"üî∏ *{phase_name}:* {score}/10 –±–∞–ª–ª–æ–≤\n"
            results_text += f"   {INTERPRETATION[phase_name][level]}\n\n"
        else:
            # –§–∞–∑–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            results_text += f"üî∏ *{phase_name}:* –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞\n\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    is_full_test = user_answers[user_id].get("full_test", False)
    
    if is_full_test and completed_phases == 3:
        # –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
        results_text += f"üìà *–û–±—â–∏–π –±–∞–ª–ª:* {total_score}/30\n\n"
        
        if total_score <= 15:
            results_text += "‚úÖ *–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è"
        elif total_score <= 20:
            results_text += "‚ö†Ô∏è *–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è"
        else:
            results_text += "üö® *–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è"
    else:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–∑
        if completed_phases == 1:
            # –ü—Ä–æ–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ñ–∞–∑–∞
            phase_name = list(phase_scores.keys())[0]
            score = phase_scores[phase_name]
            results_text += f"üìà *–ë–∞–ª–ª –ø–æ —Ñ–∞–∑–µ {phase_name}:* {score}/10\n\n"
            
            if score <= 3:
                results_text += f"‚úÖ *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ñ–∞–∑–µ {phase_name}:* –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"
            elif score <= 6:
                results_text += f"‚ö†Ô∏è *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ñ–∞–∑–µ {phase_name}:* –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å"
            else:
                results_text += f"üö® *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ñ–∞–∑–µ {phase_name}:* –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"
        else:
            # –ü—Ä–æ–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∑, –Ω–æ –Ω–µ –≤—Å–µ
            results_text += f"üìà *–û–±—â–∏–π –±–∞–ª–ª –ø–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —Ñ–∞–∑–∞–º:* {total_score}/{completed_phases * 10}\n\n"
            
            avg_score = total_score / completed_phases if completed_phases > 0 else 0
            if avg_score <= 3:
                results_text += "‚úÖ *–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è"
            elif avg_score <= 6:
                results_text += "‚ö†Ô∏è *–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è"
            else:
                results_text += "üö® *–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è"
    
    results_text += "\n\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if is_full_test and completed_phases == 3:
        # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –±–∞–ª–ª
        recommendation_score = total_score
    else:
        # –î–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–∑ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
        recommendation_score = (total_score / completed_phases) * 3 if completed_phases > 0 else 0
    
    if recommendation_score > 20:
        results_text += "üö® *–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è:*\n"
        results_text += "–¢—ã –ø–µ—Ä–µ–≥–æ—Ä–µ–ª.\n"
        results_text += "–≠—Ç–æ —É–∂–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–ª–æ—Å—Ç—å. –í—ã–≥–æ—Ä–∞–Ω–∏–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–µ–ª–æ, –ø—Å–∏—Ö–∏–∫—É, –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∂–∏–∑–Ω–∏. –°–∞–º–æ –Ω–µ –ø—Ä–æ–π–¥—ë—Ç. –ù—É–∂–Ω–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è.\n\n"
        results_text += "–°–æ–≤–µ—Ç:\n"
        results_text += "–ù–µ –¥–∞–≤–∏ –Ω–∞ —Å–µ–±—è. –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è ¬´–≤–∑—è—Ç—å —Å–µ–±—è –≤ —Ä—É–∫–∏¬ª ‚Äî –≤—Ä–µ–º—è –ø–æ–º–µ–Ω—è—Ç—å —Ä–∏—Ç–º –∏ –≤–ª–æ–∂–∏—Ç—å—Å—è –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ. –ù–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ, —Å–º–µ–Ω–∞ —Ñ–æ–∫—É—Å–∞, –ø—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è ‚Äî –≤—Å—ë —ç—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Å–ø–∞—Å–µ–Ω–∏–µ–º.\n\n"
        results_text += f"üëâ –í [{CHANNEL_NAME}]({CHANNEL_LINK}) —è –¥–µ–ª—é—Å—å –ª–∏—á–Ω—ã–º –æ–ø—ã—Ç–æ–º, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ –º—ã—Å–ª—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
    elif recommendation_score > 15:
        results_text += "‚ö†Ô∏è *–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è:*\n"
        results_text += "–¢—ã –≤ –∑–æ–Ω–µ —Ä–∏—Å–∫–∞.\n"
        results_text += "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç—ã –∑–∞–º–µ—á–∞–µ—à—å —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —É—Å—Ç–∞–ª–æ—Å—Ç—å, –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—é. –≠—Ç–æ –Ω–µ ¬´–ø—Ä–æ—Å—Ç–æ –ª–µ–Ω—å¬ª ‚Äî —ç—Ç–æ —Å–∏–≥–Ω–∞–ª, —á—Ç–æ —Ç—ã –≤—ã–¥—ã—Ö–∞–µ—à—å—Å—è.\n\n"
        results_text += "–°–æ–≤–µ—Ç:\n"
        results_text += "–û—Å—Ç–∞–Ω–æ–≤–∏—Å—å. –ü–µ—Ä–µ–∫–ª—é—á–∏ –≤–Ω–∏–º–∞–Ω–∏–µ. –†–∞–∑–≥—Ä—É–∑–∏ –≥–æ–ª–æ–≤—É ‚Äî –Ω–æ–≤—ã–º–∏ —Ç–µ–º–∞–º–∏, —Å—Ä–µ–¥–æ–π, –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏. –ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–µ —É—Å–∏–ª–∏–µ, –∞ –≤—ã—Ö–æ–¥ –∏–∑ –∫—Ä—É–≥–∞.\n\n"
        results_text += f"üëâ –í [{CHANNEL_NAME}]({CHANNEL_LINK}) —è –∫–∞–∫ —Ä–∞–∑ –æ–± —ç—Ç–æ–º ‚Äî –∫–∞–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–µ–±—è –≤ –≤—ã–≥–æ—Ä–∞–Ω–∏–∏, –≥–¥–µ –±—Ä–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é, –∫–∞–∫ –º–µ–Ω—è—Ç—å –º—ã—à–ª–µ–Ω–∏–µ. –ó–∞–ª–µ—Ç–∞–π, —ç—Ç–æ –≤–∞–∂–Ω–æ."
    else:
        results_text += "‚úÖ *–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è:*\n"
        results_text += "–¢—ã –¥–µ—Ä–∂–∏—à—å—Å—è –º–æ–ª–æ–¥—Ü–æ–º.\n"
        results_text += "–°—É–¥—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º, —Ç—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞ –≥—Ä–∞–Ω–∏ ‚Äî –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π: —Ä–µ—Å—É—Ä—Å –∫–æ–Ω–µ—á–µ–Ω. –î–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –Ω–µ –≤—ã–≥–æ—Ä–∞–µ—à—å, —É—Å—Ç–∞–ª–æ—Å—Ç—å –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –Ω–µ–∑–∞–º–µ—Ç–Ω–æ.\n\n"
        results_text += "–°–æ–≤–µ—Ç:\n"
        results_text += "–ú–µ–Ω—è–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø—Ä–æ–±—É–π –Ω–æ–≤–æ–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ. –õ—É—á—à–µ –æ—Ç–¥—ã—Ö–∞—Ç—å –Ω–∞ –æ–ø–µ—Ä–µ–∂–µ–Ω–∏–µ, —á–µ–º –ø–æ—Ç–æ–º —Å–æ–±–∏—Ä–∞—Ç—å —Å–µ–±—è –ø–æ –∫—É—Å–∫–∞–º.\n\n"
        results_text += f"üëâ –Ø –ø–∏—à—É –æ–± —ç—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ [{CHANNEL_NAME}]({CHANNEL_LINK}): –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å, —ç–Ω–µ—Ä–≥–∏—é –∏ –Ω–µ –∑–∞–∫–∏—Å–Ω—É—Ç—å."
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–π–¥–µ–Ω—ã –Ω–µ –≤—Å–µ —Ñ–∞–∑—ã
    if not is_full_test or completed_phases < 3:
        results_text += "\n\n‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        results_text += "–¢—ã –ø—Ä–æ—à—ë–ª —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Ç–µ—Å—Ç–∞. –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–∑ 30 –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        results_text += "üîç *–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤–∫–ª—é—á–∞–µ—Ç:*\n"
        results_text += "‚Ä¢ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ñ–∞–∑—É ¬´–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ¬ª\n"
        results_text += "‚Ä¢ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ñ–∞–∑—É ¬´–†–µ–∑–∏—Å—Ç–µ–Ω—Ü–∏—è¬ª\n"
        results_text += "‚Ä¢ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ñ–∞–∑—É ¬´–ò—Å—Ç–æ—â–µ–Ω–∏–µ¬ª\n\n"
        results_text += "–≠—Ç–æ –¥–∞—Å—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É —Ç–≤–æ–µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", callback_data="restart")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –º–µ—Ç–æ–¥–∏–∫–µ", callback_data="about")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if edit_message and query:
        await query.edit_message_text(
            text=results_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=user_id,
            text=results_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞–º–æ—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if generate_certificate_flag:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≥—Ä–∞–º–æ—Ç—ã
            if is_full_test and completed_phases == 3:
                if total_score <= 15:
                    level = "–ú–∞–ª–µ–Ω—å–∫–∏–π –ü–∏–∑–¥–µ—Ü"
                elif total_score <= 25:
                    level = "–°—Ä–µ–¥–Ω–∏–π –ü–∏–∑–¥–µ—Ü"
                else:
                    level = "–ë–æ–ª—å—à–æ–π –ü–∏–∑–¥–µ—Ü"
            else:
                if completed_phases == 1:
                    score = list(phase_scores.values())[0]
                    if score <= 3:
                        level = "–ú–∞–ª–µ–Ω—å–∫–∏–π –ü–∏–∑–¥–µ—Ü"
                    elif score <= 6:
                        level = "–°—Ä–µ–¥–Ω–∏–π –ü–∏–∑–¥–µ—Ü"
                    else:
                        level = "–ë–æ–ª—å—à–æ–π –ü–∏–∑–¥–µ—Ü"
                else:
                    avg_score = total_score / completed_phases if completed_phases > 0 else 0
                    if avg_score <= 3:
                        level = "–ú–∞–ª–µ–Ω—å–∫–∏–π –ü–∏–∑–¥–µ—Ü"
                    elif avg_score <= 6:
                        level = "–°—Ä–µ–¥–Ω–∏–π –ü–∏–∑–¥–µ—Ü"
                    else:
                        level = "–ë–æ–ª—å—à–æ–π –ü–∏–∑–¥–µ—Ü"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            if 'full_name' in context.user_data:
                user_name = context.user_data['full_name']
            else:
                user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                if update.effective_user.last_name:
                    user_name += f" {update.effective_user.last_name}"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞–º–æ—Ç—É
            certificate_bytes = await generate_certificate(user_name, total_score, level, completed_phases)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞–º–æ—Ç—É –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await context.bot.send_photo(
                chat_id=user_id,
                photo=certificate_bytes,
                caption="üèÜ –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –≥—Ä–∞–º–æ—Ç–∞ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞! –°–æ—Ö—Ä–∞–Ω–∏ –µ—ë –Ω–∞ –ø–∞–º—è—Ç—å –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞–º–æ—Ç—ã: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞–º–æ—Ç—É, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    
    return SHOWING_RESULTS

async def restart_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_answers:
        del user_answers[user_id]
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'full_name' in context.user_data:
        del context.user_data['full_name']
    if 'selected_test' in context.user_data:
        del context.user_data['selected_test']
    
    welcome_text = """
üî¨ *–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Ä–æ–≤–Ω—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è*
*–ê–≤—Ç–æ—Ä: –í.–í. –ë–æ–π–∫–æ (1996)*

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è –ø–æ —Ç—Ä–µ–º —Ñ–∞–∑–∞–º:

 *–§–∞–∑—ã –≤—ã–≥–æ—Ä–∞–Ω–∏—è:*

üò∞ **–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ** - –¢—ã –≤—Ä–æ–¥–µ –¥–µ—Ä–∂–∏—à—å—Å—è, –Ω–æ –≤—Å—ë —á–∞—â–µ –ª–æ–≤–∏—à—å —Å–µ–±—è –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –Ω–∞–ø—Ä—è–≥–µ. –í—Ä–æ–¥–µ –Ω–∏—á–µ–≥–æ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ, –Ω–æ –≤–Ω—É—Ç—Ä–∏ —É–∂–µ –Ω–µ —Å–ø–æ–∫–æ–π–Ω–æ. –†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, –Ω–µ–¥–æ—Å–∫–∞–∑–∞–Ω–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å ‚Äî –ø–µ—Ä–≤—ã–µ –∑–≤–æ–Ω–æ—á–∫–∏.

üò§ **–†–µ–∑–∏—Å—Ç–µ–Ω—Ü–∏—è** - –ù–∞—á–∏–Ω–∞–µ—à—å –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è. –í—Å—ë –∏ –≤—Å–µ –Ω–∞—á–∏–Ω–∞—é—Ç –±–µ—Å–∏—Ç—å. –ü—Ä–∏—Ç–≤–æ—Ä—è–µ—à—å—Å—è, —á—Ç–æ —Å–ª—É—à–∞–µ—à—å, –≥–æ–≤–æ—Ä–∏—à—å ¬´–æ–∫–µ–π¬ª ‚Äî –∏ –≤ –º—ã—Å–ª—è—Ö –≤—ã–∫–ª—é—á–∞–µ—à—å—Å—è. –•–æ—á–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å –∏ –∏—Å—á–µ–∑–Ω—É—Ç—å. –ò–¥–µ–∏, —Ü–µ–ª–∏, —Å–º—ã—Å–ª—ã ‚Äî –Ω–∞ –ø–∞—É–∑–µ.

üòµ **–ò—Å—Ç–æ—â–µ–Ω–∏–µ** - –í—Å—ë. –ü—É—Å—Ç–æ. –ù–∏ —ç–º–æ—Ü–∏–π, –Ω–∏ —Å–∏–ª. –£—Ç—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–æ–ø—Ä–æ—Å–∞: ¬´–ó–∞—á–µ–º –≤—Å—ë —ç—Ç–æ?¬ª. –¢—ã –ø—Ä–æ—Å—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—à—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–µ. –≠–Ω–µ—Ä–≥–∏–∏ –Ω–µ—Ç –¥–∞–∂–µ –Ω–∞ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ. –≠—Ç–æ –Ω–µ –ª–µ–Ω—å. –≠—Ç–æ —Ç—ã –≤—ã–≥–æ—Ä–µ–ª.

–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∑—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
"""
    
    keyboard = []
    for i, phase_data in enumerate(TEST_QUESTIONS):
        keyboard.append([InlineKeyboardButton(
            phase_data["phase"], 
            callback_data=f"phase_{i}"
        )])
    
    keyboard.append([InlineKeyboardButton("üìä –ü—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç", callback_data="full_test")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return CHOOSING_PHASE

async def about_method(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç–æ–¥–∏–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    about_text = """
üìö *–û–± –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–∏–∫–∏*

–≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –±–∞–∑–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –º–µ—Ç–æ–¥–∏–∫–∏ –í.–í. –ë–æ–π–∫–æ (1996), –∫–æ—Ç–æ—Ä–∞—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞—Å—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è —É —Ç–µ—Ö, –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–¥—å–º–∏.

–ú—ã –ø–µ—Ä–µ–ø–∏—Å–∞–ª–∏ –µ—ë –≤ –∂–∏–≤–æ–º, —á–µ—Å—Ç–Ω–æ–º –∏ –ø–æ–Ω—è—Ç–Ω–æ–º —è–∑—ã–∫–µ, –±–ª–∏–∂–µ –∫ —Ç–µ–º, –∫–æ–º—É —Å–µ–π—á–∞—Å 27‚Äì35. –ï—Å–ª–∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —É—Å—Ç–∞–ª–æ—Å—Ç—å, –∞–ø–∞—Ç–∏—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤—ã–≤–æ–∑–∏—à—å ‚Äî —ç—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –ø–æ —à–∫–∞–ª–µ –≤—ã–≥–æ—Ä–∞–Ω–∏—è.

üß® *–¢—Ä–∏ —Ñ–∞–∑—ã –≤—ã–≥–æ—Ä–∞–Ω–∏—è (–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —Å –Ω–∞—É—á–Ω–æ–≥–æ –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π)*

1Ô∏è‚É£ **–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ** ‚Äî —Ç—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω–∞ –≤–∑–≤–æ–¥–µ, –≤—Å—ë —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç, –¥–∞–∂–µ –º–µ–ª–æ—á–∏. –í–Ω—É—Ç—Ä–∏ ‚Äî —Ç—Ä–µ–≤–æ–≥–∞, —É—Å—Ç–∞–ª–æ—Å—Ç—å, —á—É–≤—Å—Ç–≤–æ ¬´—è –≤—Å—ë –¥–µ–ª–∞—é –Ω–µ —Ç–∞–∫¬ª.

2Ô∏è‚É£ **–†–µ–∑–∏—Å—Ç–µ–Ω—Ü–∏—è** ‚Äî –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ñ–∏–≥–∏–∑–º. –õ—é–¥–∏ –±–µ—Å—è—Ç, –æ–±—â–µ–Ω–∏–µ —É—Ç–æ–º–ª—è–µ—Ç, —Ä–∞–±–æ—Ç–∞ ‚Äî –∫–∞–∫ –Ω–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–µ.

3Ô∏è‚É£ **–ò—Å—Ç–æ—â–µ–Ω–∏–µ** ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ. –≠–º–æ—Ü–∏–∏ –≤—ã–∂–∂–µ–Ω—ã, —Ö–æ—á–µ—Ç—Å—è –≤—ã–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö. –î–∞–∂–µ –ø—Ä–æ—Å—Ç—ã–µ –≤–µ—â–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–µ–ø–æ–¥—ä—ë–º–Ω—ã–º–∏.

üìä *–ö–∞–∫ —á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*

0‚Äì3 –±–∞–ª–ª–∞ ‚Äî —Ñ–∞–∑–∞ –ø–æ–∫–∞ –Ω–µ —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–∞

4‚Äì6 –±–∞–ª–ª–æ–≤ ‚Äî —Ñ–∞–∑–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è

7‚Äì10 –±–∞–ª–ª–æ–≤ ‚Äî —Ñ–∞–∑–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞, –ø–æ—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –º–µ—Ä—ã

*–ò—Å—Ç–æ—á–Ω–∏–∫:* –í.–í. –ë–æ–π–∫–æ, ¬´–°–∏–Ω–¥—Ä–æ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–±—â–µ–Ω–∏–∏¬ª, 1996 (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ 30-–ª–µ—Ç–Ω–∏—Ö).
"""
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="restart")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=about_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return SHOWING_RESULTS

async def back_to_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
    query = update.callback_query
    await query.answer()
    
    return await show_results(update, context, generate_certificate_flag=False)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìù *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∑—É –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
3. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã "–°–æ–≥–ª–∞—Å–µ–Ω" –∏–ª–∏ "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"
4. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

üí° *–í–∞–∂–Ω–æ:* –û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ, –∫–∞–∫ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è.
"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = None





# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")
    
    if update and hasattr(update, 'message') and update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å /start.")
    elif update and hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å /start.")

async def generate_certificate(user_name: str, total_score: int, level: str, completed_phases: int) -> bytes:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞–º–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ PNG-—à–∞–±–ª–æ–Ω–∞"""
    from datetime import datetime
    import io
    from PIL import Image, ImageDraw, ImageFont

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω
    try:
        image = Image.open("certificate_template.png").convert("RGBA")
    except FileNotFoundError:
        logger.error("–§–∞–π–ª certificate_template.png –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        raise FileNotFoundError("–§–∞–π–ª certificate_template.png –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        raise
    draw = ImageDraw.Draw(image)

    # –®—Ä–∏—Ñ—Ç—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞ Evolventa –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
    try:
        # –ü—Ä–æ–±—É–µ–º —à—Ä–∏—Ñ—Ç Evolventa –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
        font_nick = ImageFont.truetype("evolventa/ttf/Evolventa-Regular.ttf", 48)
        font_level = ImageFont.truetype("evolventa/ttf/Evolventa-Regular.ttf", 44)
        font_date = ImageFont.truetype("evolventa/ttf/Evolventa-Regular.ttf", 44)
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç Evolventa –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    except:
        try:
            # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã Linux (–¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞)
            font_nick = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 48)
            font_level = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 44)
            font_date = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 44)
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç Linux")
        except:
            try:
                # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã macOS
                font_nick = ImageFont.truetype("/System/Library/Fonts/Helvetica.ttc", 48)
                font_level = ImageFont.truetype("/System/Library/Fonts/Helvetica.ttc", 44)
                font_date = ImageFont.truetype("/System/Library/Fonts/Helvetica.ttc", 44)
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç macOS")
            except:
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
                font_nick = ImageFont.load_default()
                font_level = ImageFont.load_default()
                font_date = ImageFont.load_default()
                logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç - Evolventa –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
    nick_xy = (360, 610)         # –ü–æ–¥ –Ω–∞–¥–ø–∏—Å—å—é ¬´–í—ã–¥–∞–Ω–∞¬ª
    level_xy = (180, 1110)         # –ü–æ–¥ –Ω–∞–¥–ø–∏—Å—å—é ¬´–£—Ä–æ–≤–µ–Ω—å –≤—ã–≥–æ—Ä–∞–Ω–∏—è¬ª
    date_xy = (300, 1270)          # –ü–æ–¥ –Ω–∞–¥–ø–∏—Å—å—é ¬´–î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è¬ª

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    date_str = datetime.now().strftime('%d.%m.%Y')

    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    draw.text(nick_xy, user_name, font=font_nick, fill=(0,0,0))
    draw.text(level_xy, level, font=font_level, fill=(0,0,0))
    draw.text(date_xy, date_str, font=font_date, fill=(0,0,0))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
    img_byte_arr = io.BytesIO()
    image.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)
    return img_byte_arr.getvalue()

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global application
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN or BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            CHOOSING_PHASE: [CallbackQueryHandler(start_phase_selection)],
            ANSWERING_QUESTIONS: [CallbackQueryHandler(handle_answer)],
            CHECKING_SUBSCRIPTION: [CallbackQueryHandler(handle_subscription_check)],
            SHOWING_RESULTS: [
                CallbackQueryHandler(restart_test, pattern="^restart$"),
                CallbackQueryHandler(about_method, pattern="^about$"),
                CallbackQueryHandler(back_to_results, pattern="^back_to_results$")
            ]
        },
        fallbacks=[CommandHandler("help", help_command)],
        per_chat=True,
        per_user=True,
        per_message=False
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º polling...")
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main() 